openapi: 3.0.0
tags:
  - name: users
    description: Users API
  - name: todo
    description: Todo API
info:
  title: Symbolic Boilerplate
  description: An API spec for managing todo lists
  version: 1.0.0
  contact:
    name: Simon Ball
    url: 'https://simonball.me'
    email: contact@simonball.me
servers:
  - url: http://localhost:8080
    description: Local Development
paths:
  /login:
    post:
      tags:
        - users
      summary: Log user in and retrieve JWT token
      operationId: loginPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9; Path=/; Max-Age=3600; HttpOnly"
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/UserSecurity'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /logout:
    get:
      security:
        - cookieAuth: [ ]
        - tokenAuth: [ ]
      tags:
        - users
      summary: Log user out
      operationId: logoutGet
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                example: "jwt=; Path=/; Max-Age=0; HttpOnly"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    default: 200
  /todos:
    get:
      security:
        - cookieAuth: []
        - tokenAuth: [ ]
      tags:
        - todo
      summary: Get a listing of todo in system
      operationId: todosGet
      responses:
        '200':
          description: Array of todo objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: todoListGet
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
                    example:
                      - id: 1
                        title: Create ToDo App
                        content: The architecture involved in creating a todo list is to demonstrate how to...
                        complete: true
                      - id: 2
                        title: Write article about ToDo
                        complete: false
                required:
                  - message
                  - data
        '401':
          $ref: '#/components/responses/Unauthorized'
    post:
      security:
        - cookieAuth: [ ]
        - tokenAuth: [ ]
      tags:
        - todo
      summary: Create a new todo in system
      operationId: todosPost
      requestBody:
        $ref: '#/components/requestBodies/TodoPost'
      responses:
        '200':
          description: Todo objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: todoPost
                  data:
                    $ref: '#/components/schemas/Todo'
                required:
                  - message
                  - data
        '401':
          $ref: '#/components/responses/Unauthorized'
  /todos/{TodoId}:
    get:
      security:
        - cookieAuth: [ ]
        - tokenAuth: [ ]
      tags:
        - todo
      parameters:
        - $ref: '#/components/parameters/TodoId'
      summary: Get detailed information about a particular todo
      operationId: todosGetById
      responses:
        '200':
          description: Detailed information about one todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: todosGetOne
                  data:
                    $ref: '#/components/schemas/Todo'
                required:
                  - message
                  - data
        '401':
          $ref: '#/components/responses/Unauthorized'
    put:
      summary: Update a particular todo
      operationId: todosPutById
      security:
        - cookieAuth: [ ]
        - tokenAuth: [ ]
      tags:
        - todo
      parameters:
        - $ref: '#/components/parameters/TodoId'
      requestBody:
        $ref: '#/components/requestBodies/TodoUpdate'
      responses:
        '200':
          description: Detailed information about one todo
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: updateOne
                  data:
                    $ref: '#/components/schemas/Todo'
                required:
                  - message
                  - data
        '401':
          $ref: '#/components/responses/Unauthorized'

components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: JWT
    tokenAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  requestBodies:
    TodoPost:
      description: A JSON object containing todo information
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                example: An example todo
              content:
                type: string
                example: This is a much longer description of the todo in markdown
            required:
              - title
    TodoUpdate:
      description: A JSON object containing todo information
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                example: An example todo
              content:
                type: string
                example: This is a much longer description of the todo in markdown
              complete:
                type: boolean
                example: true
  schemas:
    UserSecurity:
      title: User Security information
      properties:
        code:
          type: integer
          description: Response code from auth
          example: 200
        expire:
          type: string
          description: DateTime value for when auth token expires
          example: "2033-04-28T01:49:28+08:00"
        token:
          type: string
          description: The actual auth token
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODI2MTc3NjgsImlkIjoiYWRtaW4iLCJvcmlnX2lhdCI6MTY4MjYwNjk2OH0.c7bcDuOJ3HI6TC3Ug50-D_WsR1alUxrmag-pQmo1WNU"
      required:
        - code
        - expire
        - token
    User:
      title: User
      type: object
      properties:
        username:
          type: string
          description: Username
        password:
          type: string
          description: Password
      required:
        - username
        - password
    Todo:
      title: Todo
      type: object
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: An example todo
        content:
          type: string
          example: This is a much longer description of the todo in markdown
        complete:
          type: boolean
          example: true
      required:
        - id
        - title
        - content
        - complete
    TodoListing:
      title: TodoListing
      type: object
      properties:
        id:
          type: number
          example: 1
        title:
          type: string
          example: An example todo
        complete:
          type: boolean
          example: true
      required:
        - id
        - title
        - complete
  responses:
    NotFound:
      description: Item not found
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 404
              message:
                type: string
                example: Not Found
    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
                example: 401
              message:
                type: string
                example: cookie token is empty
    ServerError:
      description: Error response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Something went wrong
  parameters:
    TodoId:
      name: TodoId
      description: Unique todo Identifier code
      in: path
      required: true
      schema:
        type: integer
