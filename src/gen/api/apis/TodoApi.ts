/* tslint:disable */
/* eslint-disable */
/**
 * Symbolic Boilerplate
 * An API spec for managing todo lists
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@simonball.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginPost401Response,
  TodosGet200Response,
  TodosGetById200Response,
  TodosPost200Response,
  TodosPostRequest,
  TodosPutById200Response,
  TodosPutByIdRequest,
} from '../models';
import {
    LoginPost401ResponseFromJSON,
    LoginPost401ResponseToJSON,
    TodosGet200ResponseFromJSON,
    TodosGet200ResponseToJSON,
    TodosGetById200ResponseFromJSON,
    TodosGetById200ResponseToJSON,
    TodosPost200ResponseFromJSON,
    TodosPost200ResponseToJSON,
    TodosPostRequestFromJSON,
    TodosPostRequestToJSON,
    TodosPutById200ResponseFromJSON,
    TodosPutById200ResponseToJSON,
    TodosPutByIdRequestFromJSON,
    TodosPutByIdRequestToJSON,
} from '../models';

export interface TodosGetByIdRequest {
    todoId: number;
}

export interface TodosPostOperationRequest {
    todosPostRequest: TodosPostRequest;
}

export interface TodosPutByIdOperationRequest {
    todoId: number;
    todosPutByIdRequest: TodosPutByIdRequest;
}

/**
 * 
 */
export class TodoApi extends runtime.BaseAPI {

    /**
     * Get a listing of todo in system
     */
    async todosGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TodosGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("tokenAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/todos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodosGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a listing of todo in system
     */
    async todosGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TodosGet200Response> {
        const response = await this.todosGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a particular todo
     */
    async todosGetByIdRaw(requestParameters: TodosGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TodosGetById200Response>> {
        if (requestParameters.todoId === null || requestParameters.todoId === undefined) {
            throw new runtime.RequiredError('todoId','Required parameter requestParameters.todoId was null or undefined when calling todosGetById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("tokenAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/todos/{TodoId}`.replace(`{${"TodoId"}}`, encodeURIComponent(String(requestParameters.todoId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodosGetById200ResponseFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a particular todo
     */
    async todosGetById(requestParameters: TodosGetByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TodosGetById200Response> {
        const response = await this.todosGetByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new todo in system
     */
    async todosPostRaw(requestParameters: TodosPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TodosPost200Response>> {
        if (requestParameters.todosPostRequest === null || requestParameters.todosPostRequest === undefined) {
            throw new runtime.RequiredError('todosPostRequest','Required parameter requestParameters.todosPostRequest was null or undefined when calling todosPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("tokenAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/todos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TodosPostRequestToJSON(requestParameters.todosPostRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodosPost200ResponseFromJSON(jsonValue));
    }

    /**
     * Create a new todo in system
     */
    async todosPost(requestParameters: TodosPostOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TodosPost200Response> {
        const response = await this.todosPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a particular todo
     */
    async todosPutByIdRaw(requestParameters: TodosPutByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TodosPutById200Response>> {
        if (requestParameters.todoId === null || requestParameters.todoId === undefined) {
            throw new runtime.RequiredError('todoId','Required parameter requestParameters.todoId was null or undefined when calling todosPutById.');
        }

        if (requestParameters.todosPutByIdRequest === null || requestParameters.todosPutByIdRequest === undefined) {
            throw new runtime.RequiredError('todosPutByIdRequest','Required parameter requestParameters.todosPutByIdRequest was null or undefined when calling todosPutById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("tokenAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/todos/{TodoId}`.replace(`{${"TodoId"}}`, encodeURIComponent(String(requestParameters.todoId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TodosPutByIdRequestToJSON(requestParameters.todosPutByIdRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TodosPutById200ResponseFromJSON(jsonValue));
    }

    /**
     * Update a particular todo
     */
    async todosPutById(requestParameters: TodosPutByIdOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TodosPutById200Response> {
        const response = await this.todosPutByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
