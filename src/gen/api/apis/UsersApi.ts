/* tslint:disable */
/* eslint-disable */
/**
 * Symbolic Boilerplate
 * An API spec for managing todo lists
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@simonball.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginPost401Response,
  LogoutGet200Response,
  User,
  UserSecurity,
} from '../models';
import {
    LoginPost401ResponseFromJSON,
    LoginPost401ResponseToJSON,
    LogoutGet200ResponseFromJSON,
    LogoutGet200ResponseToJSON,
    UserFromJSON,
    UserToJSON,
    UserSecurityFromJSON,
    UserSecurityToJSON,
} from '../models';

export interface LoginPostRequest {
    user: User;
}

/**
 * 
 */
export class UsersApi extends runtime.BaseAPI {

    /**
     * Log user in and retrieve JWT token
     */
    async loginPostRaw(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSecurity>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling loginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSecurityFromJSON(jsonValue));
    }

    /**
     * Log user in and retrieve JWT token
     */
    async loginPost(requestParameters: LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSecurity> {
        const response = await this.loginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log user out
     */
    async logoutGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LogoutGet200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("tokenAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LogoutGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Log user out
     */
    async logoutGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LogoutGet200Response> {
        const response = await this.logoutGetRaw(initOverrides);
        return await response.value();
    }

}
