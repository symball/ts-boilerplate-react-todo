/* tslint:disable */
/* eslint-disable */
/**
 * Symbolic Boilerplate
 * An API spec for managing posts
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@simonball.me
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LoginPost401Response,
  PostsGet200Response,
  PostsPostIdGet200Response,
} from '../models';
import {
    LoginPost401ResponseFromJSON,
    LoginPost401ResponseToJSON,
    PostsGet200ResponseFromJSON,
    PostsGet200ResponseToJSON,
    PostsPostIdGet200ResponseFromJSON,
    PostsPostIdGet200ResponseToJSON,
} from '../models';

export interface PostsGetRequest {
    cursor?: number;
    dir?: string;
}

export interface PostsPostIdGetRequest {
    postId: number;
}

/**
 * 
 */
export class PostsApi extends runtime.BaseAPI {

    /**
     * Get a listing of posts in system
     */
    async postsGetRaw(requestParameters: PostsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters.cursor !== undefined) {
            queryParameters['cursor'] = requestParameters.cursor;
        }

        if (requestParameters.dir !== undefined) {
            queryParameters['dir'] = requestParameters.dir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("tokenAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get a listing of posts in system
     */
    async postsGet(requestParameters: PostsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostsGet200Response> {
        const response = await this.postsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get detailed information about a particular post
     */
    async postsPostIdGetRaw(requestParameters: PostsPostIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostsPostIdGet200Response>> {
        if (requestParameters.postId === null || requestParameters.postId === undefined) {
            throw new runtime.RequiredError('postId','Required parameter requestParameters.postId was null or undefined when calling postsPostIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("tokenAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/posts/{PostId}`.replace(`{${"PostId"}}`, encodeURIComponent(String(requestParameters.postId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostsPostIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get detailed information about a particular post
     */
    async postsPostIdGet(requestParameters: PostsPostIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostsPostIdGet200Response> {
        const response = await this.postsPostIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
